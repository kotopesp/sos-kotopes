// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockModeratorStore is an autogenerated mock type for the ModeratorStore type
type MockModeratorStore struct {
	mock.Mock
}

type MockModeratorStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModeratorStore) EXPECT() *MockModeratorStore_Expecter {
	return &MockModeratorStore_Expecter{mock: &_m.Mock}
}

// CreateModerator provides a mock function with given fields: ctx, moderator
func (_m *MockModeratorStore) CreateModerator(ctx context.Context, moderator core.Moderator) error {
	ret := _m.Called(ctx, moderator)

	if len(ret) == 0 {
		panic("no return value specified for CreateModerator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Moderator) error); ok {
		r0 = rf(ctx, moderator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModeratorStore_CreateModerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateModerator'
type MockModeratorStore_CreateModerator_Call struct {
	*mock.Call
}

// CreateModerator is a helper method to define mock.On call
//   - ctx context.Context
//   - moderator core.Moderator
func (_e *MockModeratorStore_Expecter) CreateModerator(ctx interface{}, moderator interface{}) *MockModeratorStore_CreateModerator_Call {
	return &MockModeratorStore_CreateModerator_Call{Call: _e.mock.On("CreateModerator", ctx, moderator)}
}

func (_c *MockModeratorStore_CreateModerator_Call) Run(run func(ctx context.Context, moderator core.Moderator)) *MockModeratorStore_CreateModerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Moderator))
	})
	return _c
}

func (_c *MockModeratorStore_CreateModerator_Call) Return(err error) *MockModeratorStore_CreateModerator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModeratorStore_CreateModerator_Call) RunAndReturn(run func(context.Context, core.Moderator) error) *MockModeratorStore_CreateModerator_Call {
	_c.Call.Return(run)
	return _c
}

// GetModeratorByID provides a mock function with given fields: ctx, id
func (_m *MockModeratorStore) GetModeratorByID(ctx context.Context, id int) (core.Moderator, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetModeratorByID")
	}

	var r0 core.Moderator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Moderator, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Moderator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModeratorStore_GetModeratorByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModeratorByID'
type MockModeratorStore_GetModeratorByID_Call struct {
	*mock.Call
}

// GetModeratorByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockModeratorStore_Expecter) GetModeratorByID(ctx interface{}, id interface{}) *MockModeratorStore_GetModeratorByID_Call {
	return &MockModeratorStore_GetModeratorByID_Call{Call: _e.mock.On("GetModeratorByID", ctx, id)}
}

func (_c *MockModeratorStore_GetModeratorByID_Call) Run(run func(ctx context.Context, id int)) *MockModeratorStore_GetModeratorByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockModeratorStore_GetModeratorByID_Call) Return(moderator core.Moderator, err error) *MockModeratorStore_GetModeratorByID_Call {
	_c.Call.Return(moderator, err)
	return _c
}

func (_c *MockModeratorStore_GetModeratorByID_Call) RunAndReturn(run func(context.Context, int) (core.Moderator, error)) *MockModeratorStore_GetModeratorByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModeratorStore creates a new instance of MockModeratorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModeratorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModeratorStore {
	mock := &MockModeratorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
