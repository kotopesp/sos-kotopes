// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockSeekersService is an autogenerated mock type for the SeekersService type
type MockSeekersService struct {
	mock.Mock
}

type MockSeekersService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeekersService) EXPECT() *MockSeekersService_Expecter {
	return &MockSeekersService_Expecter{mock: &_m.Mock}
}

// CreateSeeker provides a mock function with given fields: ctx, seeker
func (_m *MockSeekersService) CreateSeeker(ctx context.Context, seeker core.Seeker) (core.Seeker, error) {
	ret := _m.Called(ctx, seeker)

	if len(ret) == 0 {
		panic("no return value specified for CreateSeeker")
	}

	var r0 core.Seeker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Seeker) (core.Seeker, error)); ok {
		return rf(ctx, seeker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Seeker) core.Seeker); ok {
		r0 = rf(ctx, seeker)
	} else {
		r0 = ret.Get(0).(core.Seeker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Seeker) error); ok {
		r1 = rf(ctx, seeker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeekersService_CreateSeeker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSeeker'
type MockSeekersService_CreateSeeker_Call struct {
	*mock.Call
}

// CreateSeeker is a helper method to define mock.On call
//   - ctx context.Context
//   - seeker core.Seeker
func (_e *MockSeekersService_Expecter) CreateSeeker(ctx interface{}, seeker interface{}) *MockSeekersService_CreateSeeker_Call {
	return &MockSeekersService_CreateSeeker_Call{Call: _e.mock.On("CreateSeeker", ctx, seeker)}
}

func (_c *MockSeekersService_CreateSeeker_Call) Run(run func(ctx context.Context, seeker core.Seeker)) *MockSeekersService_CreateSeeker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Seeker))
	})
	return _c
}

func (_c *MockSeekersService_CreateSeeker_Call) Return(_a0 core.Seeker, _a1 error) *MockSeekersService_CreateSeeker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeekersService_CreateSeeker_Call) RunAndReturn(run func(context.Context, core.Seeker) (core.Seeker, error)) *MockSeekersService_CreateSeeker_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSeeker provides a mock function with given fields: ctx, userID
func (_m *MockSeekersService) DeleteSeeker(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSeeker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSeekersService_DeleteSeeker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSeeker'
type MockSeekersService_DeleteSeeker_Call struct {
	*mock.Call
}

// DeleteSeeker is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockSeekersService_Expecter) DeleteSeeker(ctx interface{}, userID interface{}) *MockSeekersService_DeleteSeeker_Call {
	return &MockSeekersService_DeleteSeeker_Call{Call: _e.mock.On("DeleteSeeker", ctx, userID)}
}

func (_c *MockSeekersService_DeleteSeeker_Call) Run(run func(ctx context.Context, userID int)) *MockSeekersService_DeleteSeeker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSeekersService_DeleteSeeker_Call) Return(_a0 error) *MockSeekersService_DeleteSeeker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSeekersService_DeleteSeeker_Call) RunAndReturn(run func(context.Context, int) error) *MockSeekersService_DeleteSeeker_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeekers provides a mock function with given fields: ctx, params
func (_m *MockSeekersService) GetAllSeekers(ctx context.Context, params core.GetAllSeekersParams) ([]core.Seeker, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeekers")
	}

	var r0 []core.Seeker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllSeekersParams) ([]core.Seeker, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllSeekersParams) []core.Seeker); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Seeker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllSeekersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeekersService_GetAllSeekers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeekers'
type MockSeekersService_GetAllSeekers_Call struct {
	*mock.Call
}

// GetAllSeekers is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllSeekersParams
func (_e *MockSeekersService_Expecter) GetAllSeekers(ctx interface{}, params interface{}) *MockSeekersService_GetAllSeekers_Call {
	return &MockSeekersService_GetAllSeekers_Call{Call: _e.mock.On("GetAllSeekers", ctx, params)}
}

func (_c *MockSeekersService_GetAllSeekers_Call) Run(run func(ctx context.Context, params core.GetAllSeekersParams)) *MockSeekersService_GetAllSeekers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllSeekersParams))
	})
	return _c
}

func (_c *MockSeekersService_GetAllSeekers_Call) Return(_a0 []core.Seeker, _a1 error) *MockSeekersService_GetAllSeekers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeekersService_GetAllSeekers_Call) RunAndReturn(run func(context.Context, core.GetAllSeekersParams) ([]core.Seeker, error)) *MockSeekersService_GetAllSeekers_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeeker provides a mock function with given fields: ctx, userID
func (_m *MockSeekersService) GetSeeker(ctx context.Context, userID int) (core.Seeker, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSeeker")
	}

	var r0 core.Seeker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Seeker, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Seeker); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(core.Seeker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeekersService_GetSeeker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeeker'
type MockSeekersService_GetSeeker_Call struct {
	*mock.Call
}

// GetSeeker is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockSeekersService_Expecter) GetSeeker(ctx interface{}, userID interface{}) *MockSeekersService_GetSeeker_Call {
	return &MockSeekersService_GetSeeker_Call{Call: _e.mock.On("GetSeeker", ctx, userID)}
}

func (_c *MockSeekersService_GetSeeker_Call) Run(run func(ctx context.Context, userID int)) *MockSeekersService_GetSeeker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSeekersService_GetSeeker_Call) Return(_a0 core.Seeker, _a1 error) *MockSeekersService_GetSeeker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeekersService_GetSeeker_Call) RunAndReturn(run func(context.Context, int) (core.Seeker, error)) *MockSeekersService_GetSeeker_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSeeker provides a mock function with given fields: ctx, seeker
func (_m *MockSeekersService) UpdateSeeker(ctx context.Context, seeker core.UpdateSeeker) (core.Seeker, error) {
	ret := _m.Called(ctx, seeker)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSeeker")
	}

	var r0 core.Seeker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateSeeker) (core.Seeker, error)); ok {
		return rf(ctx, seeker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateSeeker) core.Seeker); ok {
		r0 = rf(ctx, seeker)
	} else {
		r0 = ret.Get(0).(core.Seeker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateSeeker) error); ok {
		r1 = rf(ctx, seeker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeekersService_UpdateSeeker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSeeker'
type MockSeekersService_UpdateSeeker_Call struct {
	*mock.Call
}

// UpdateSeeker is a helper method to define mock.On call
//   - ctx context.Context
//   - seeker core.UpdateSeeker
func (_e *MockSeekersService_Expecter) UpdateSeeker(ctx interface{}, seeker interface{}) *MockSeekersService_UpdateSeeker_Call {
	return &MockSeekersService_UpdateSeeker_Call{Call: _e.mock.On("UpdateSeeker", ctx, seeker)}
}

func (_c *MockSeekersService_UpdateSeeker_Call) Run(run func(ctx context.Context, seeker core.UpdateSeeker)) *MockSeekersService_UpdateSeeker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateSeeker))
	})
	return _c
}

func (_c *MockSeekersService_UpdateSeeker_Call) Return(_a0 core.Seeker, _a1 error) *MockSeekersService_UpdateSeeker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeekersService_UpdateSeeker_Call) RunAndReturn(run func(context.Context, core.UpdateSeeker) (core.Seeker, error)) *MockSeekersService_UpdateSeeker_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSeekersService creates a new instance of MockSeekersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeekersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeekersService {
	mock := &MockSeekersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
