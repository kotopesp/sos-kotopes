// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockRefreshSessionStore is an autogenerated mock type for the RefreshSessionStore type
type MockRefreshSessionStore struct {
	mock.Mock
}

type MockRefreshSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRefreshSessionStore) EXPECT() *MockRefreshSessionStore_Expecter {
	return &MockRefreshSessionStore_Expecter{mock: &_m.Mock}
}

// CountSessionsAndDelete provides a mock function with given fields: ctx, userID
func (_m *MockRefreshSessionStore) CountSessionsAndDelete(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountSessionsAndDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshSessionStore_CountSessionsAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSessionsAndDelete'
type MockRefreshSessionStore_CountSessionsAndDelete_Call struct {
	*mock.Call
}

// CountSessionsAndDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockRefreshSessionStore_Expecter) CountSessionsAndDelete(ctx interface{}, userID interface{}) *MockRefreshSessionStore_CountSessionsAndDelete_Call {
	return &MockRefreshSessionStore_CountSessionsAndDelete_Call{Call: _e.mock.On("CountSessionsAndDelete", ctx, userID)}
}

func (_c *MockRefreshSessionStore_CountSessionsAndDelete_Call) Run(run func(ctx context.Context, userID int)) *MockRefreshSessionStore_CountSessionsAndDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRefreshSessionStore_CountSessionsAndDelete_Call) Return(_a0 error) *MockRefreshSessionStore_CountSessionsAndDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshSessionStore_CountSessionsAndDelete_Call) RunAndReturn(run func(context.Context, int) error) *MockRefreshSessionStore_CountSessionsAndDelete_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshSessionByToken provides a mock function with given fields: ctx, token
func (_m *MockRefreshSessionStore) GetRefreshSessionByToken(ctx context.Context, token string) (core.RefreshSession, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshSessionByToken")
	}

	var r0 core.RefreshSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (core.RefreshSession, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) core.RefreshSession); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(core.RefreshSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefreshSessionStore_GetRefreshSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshSessionByToken'
type MockRefreshSessionStore_GetRefreshSessionByToken_Call struct {
	*mock.Call
}

// GetRefreshSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRefreshSessionStore_Expecter) GetRefreshSessionByToken(ctx interface{}, token interface{}) *MockRefreshSessionStore_GetRefreshSessionByToken_Call {
	return &MockRefreshSessionStore_GetRefreshSessionByToken_Call{Call: _e.mock.On("GetRefreshSessionByToken", ctx, token)}
}

func (_c *MockRefreshSessionStore_GetRefreshSessionByToken_Call) Run(run func(ctx context.Context, token string)) *MockRefreshSessionStore_GetRefreshSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRefreshSessionStore_GetRefreshSessionByToken_Call) Return(data core.RefreshSession, err error) *MockRefreshSessionStore_GetRefreshSessionByToken_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockRefreshSessionStore_GetRefreshSessionByToken_Call) RunAndReturn(run func(context.Context, string) (core.RefreshSession, error)) *MockRefreshSessionStore_GetRefreshSessionByToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefreshSession provides a mock function with given fields: ctx, param, refreshSession
func (_m *MockRefreshSessionStore) UpdateRefreshSession(ctx context.Context, param core.UpdateRefreshSessionParam, refreshSession core.RefreshSession) error {
	ret := _m.Called(ctx, param, refreshSession)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRefreshSessionParam, core.RefreshSession) error); ok {
		r0 = rf(ctx, param, refreshSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshSessionStore_UpdateRefreshSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefreshSession'
type MockRefreshSessionStore_UpdateRefreshSession_Call struct {
	*mock.Call
}

// UpdateRefreshSession is a helper method to define mock.On call
//   - ctx context.Context
//   - param core.UpdateRefreshSessionParam
//   - refreshSession core.RefreshSession
func (_e *MockRefreshSessionStore_Expecter) UpdateRefreshSession(ctx interface{}, param interface{}, refreshSession interface{}) *MockRefreshSessionStore_UpdateRefreshSession_Call {
	return &MockRefreshSessionStore_UpdateRefreshSession_Call{Call: _e.mock.On("UpdateRefreshSession", ctx, param, refreshSession)}
}

func (_c *MockRefreshSessionStore_UpdateRefreshSession_Call) Run(run func(ctx context.Context, param core.UpdateRefreshSessionParam, refreshSession core.RefreshSession)) *MockRefreshSessionStore_UpdateRefreshSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateRefreshSessionParam), args[2].(core.RefreshSession))
	})
	return _c
}

func (_c *MockRefreshSessionStore_UpdateRefreshSession_Call) Return(_a0 error) *MockRefreshSessionStore_UpdateRefreshSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshSessionStore_UpdateRefreshSession_Call) RunAndReturn(run func(context.Context, core.UpdateRefreshSessionParam, core.RefreshSession) error) *MockRefreshSessionStore_UpdateRefreshSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRefreshSessionStore creates a new instance of MockRefreshSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRefreshSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRefreshSessionStore {
	mock := &MockRefreshSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
