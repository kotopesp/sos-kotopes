// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockModeratorService is an autogenerated mock type for the ModeratorService type
type MockModeratorService struct {
	mock.Mock
}

type MockModeratorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModeratorService) EXPECT() *MockModeratorService_Expecter {
	return &MockModeratorService_Expecter{mock: &_m.Mock}
}

// GetModerator provides a mock function with given fields: ctx, id
func (_m *MockModeratorService) GetModerator(ctx context.Context, id int) (core.Moderator, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetModerator")
	}

	var r0 core.Moderator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Moderator, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Moderator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModeratorService_GetModerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModerator'
type MockModeratorService_GetModerator_Call struct {
	*mock.Call
}

// GetModerator is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockModeratorService_Expecter) GetModerator(ctx interface{}, id interface{}) *MockModeratorService_GetModerator_Call {
	return &MockModeratorService_GetModerator_Call{Call: _e.mock.On("GetModerator", ctx, id)}
}

func (_c *MockModeratorService_GetModerator_Call) Run(run func(ctx context.Context, id int)) *MockModeratorService_GetModerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockModeratorService_GetModerator_Call) Return(moderator core.Moderator, err error) *MockModeratorService_GetModerator_Call {
	_c.Call.Return(moderator, err)
	return _c
}

func (_c *MockModeratorService_GetModerator_Call) RunAndReturn(run func(context.Context, int) (core.Moderator, error)) *MockModeratorService_GetModerator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModeratorService creates a new instance of MockModeratorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModeratorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModeratorService {
	mock := &MockModeratorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
