// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockReportStore is an autogenerated mock type for the ReportStore type
type MockReportStore struct {
	mock.Mock
}

type MockReportStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReportStore) EXPECT() *MockReportStore_Expecter {
	return &MockReportStore_Expecter{mock: &_m.Mock}
}

// CreateReport provides a mock function with given fields: ctx, report
func (_m *MockReportStore) CreateReport(ctx context.Context, report core.Report) error {
	ret := _m.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for CreateReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Report) error); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReportStore_CreateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReport'
type MockReportStore_CreateReport_Call struct {
	*mock.Call
}

// CreateReport is a helper method to define mock.On call
//   - ctx context.Context
//   - report core.Report
func (_e *MockReportStore_Expecter) CreateReport(ctx interface{}, report interface{}) *MockReportStore_CreateReport_Call {
	return &MockReportStore_CreateReport_Call{Call: _e.mock.On("CreateReport", ctx, report)}
}

func (_c *MockReportStore_CreateReport_Call) Run(run func(ctx context.Context, report core.Report)) *MockReportStore_CreateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Report))
	})
	return _c
}

func (_c *MockReportStore_CreateReport_Call) Return(err error) *MockReportStore_CreateReport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReportStore_CreateReport_Call) RunAndReturn(run func(context.Context, core.Report) error) *MockReportStore_CreateReport_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllReports provides a mock function with given fields: ctx, reportableID, reportableType
func (_m *MockReportStore) DeleteAllReports(ctx context.Context, reportableID int, reportableType string) error {
	ret := _m.Called(ctx, reportableID, reportableType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllReports")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, reportableID, reportableType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReportStore_DeleteAllReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllReports'
type MockReportStore_DeleteAllReports_Call struct {
	*mock.Call
}

// DeleteAllReports is a helper method to define mock.On call
//   - ctx context.Context
//   - reportableID int
//   - reportableType string
func (_e *MockReportStore_Expecter) DeleteAllReports(ctx interface{}, reportableID interface{}, reportableType interface{}) *MockReportStore_DeleteAllReports_Call {
	return &MockReportStore_DeleteAllReports_Call{Call: _e.mock.On("DeleteAllReports", ctx, reportableID, reportableType)}
}

func (_c *MockReportStore_DeleteAllReports_Call) Run(run func(ctx context.Context, reportableID int, reportableType string)) *MockReportStore_DeleteAllReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockReportStore_DeleteAllReports_Call) Return(err error) *MockReportStore_DeleteAllReports_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReportStore_DeleteAllReports_Call) RunAndReturn(run func(context.Context, int, string) error) *MockReportStore_DeleteAllReports_Call {
	_c.Call.Return(run)
	return _c
}

// GetReportReasons provides a mock function with given fields: ctx, reportableID, reportableType
func (_m *MockReportStore) GetReportReasons(ctx context.Context, reportableID int, reportableType string) ([]string, error) {
	ret := _m.Called(ctx, reportableID, reportableType)

	if len(ret) == 0 {
		panic("no return value specified for GetReportReasons")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]string, error)); ok {
		return rf(ctx, reportableID, reportableType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []string); ok {
		r0 = rf(ctx, reportableID, reportableType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, reportableID, reportableType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReportStore_GetReportReasons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReportReasons'
type MockReportStore_GetReportReasons_Call struct {
	*mock.Call
}

// GetReportReasons is a helper method to define mock.On call
//   - ctx context.Context
//   - reportableID int
//   - reportableType string
func (_e *MockReportStore_Expecter) GetReportReasons(ctx interface{}, reportableID interface{}, reportableType interface{}) *MockReportStore_GetReportReasons_Call {
	return &MockReportStore_GetReportReasons_Call{Call: _e.mock.On("GetReportReasons", ctx, reportableID, reportableType)}
}

func (_c *MockReportStore_GetReportReasons_Call) Run(run func(ctx context.Context, reportableID int, reportableType string)) *MockReportStore_GetReportReasons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockReportStore_GetReportReasons_Call) Return(reasons []string, err error) *MockReportStore_GetReportReasons_Call {
	_c.Call.Return(reasons, err)
	return _c
}

func (_c *MockReportStore_GetReportReasons_Call) RunAndReturn(run func(context.Context, int, string) ([]string, error)) *MockReportStore_GetReportReasons_Call {
	_c.Call.Return(run)
	return _c
}

// GetReportsCount provides a mock function with given fields: ctx, reportableID, reportableType
func (_m *MockReportStore) GetReportsCount(ctx context.Context, reportableID int, reportableType string) (int, error) {
	ret := _m.Called(ctx, reportableID, reportableType)

	if len(ret) == 0 {
		panic("no return value specified for GetReportsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (int, error)); ok {
		return rf(ctx, reportableID, reportableType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(ctx, reportableID, reportableType)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, reportableID, reportableType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReportStore_GetReportsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReportsCount'
type MockReportStore_GetReportsCount_Call struct {
	*mock.Call
}

// GetReportsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - reportableID int
//   - reportableType string
func (_e *MockReportStore_Expecter) GetReportsCount(ctx interface{}, reportableID interface{}, reportableType interface{}) *MockReportStore_GetReportsCount_Call {
	return &MockReportStore_GetReportsCount_Call{Call: _e.mock.On("GetReportsCount", ctx, reportableID, reportableType)}
}

func (_c *MockReportStore_GetReportsCount_Call) Run(run func(ctx context.Context, reportableID int, reportableType string)) *MockReportStore_GetReportsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockReportStore_GetReportsCount_Call) Return(_a0 int, _a1 error) *MockReportStore_GetReportsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReportStore_GetReportsCount_Call) RunAndReturn(run func(context.Context, int, string) (int, error)) *MockReportStore_GetReportsCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReportStore creates a new instance of MockReportStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReportStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReportStore {
	mock := &MockReportStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
