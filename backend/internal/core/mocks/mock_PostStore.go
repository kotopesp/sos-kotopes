// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockPostStore is an autogenerated mock type for the PostStore type
type MockPostStore struct {
	mock.Mock
}

type MockPostStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostStore) EXPECT() *MockPostStore_Expecter {
	return &MockPostStore_Expecter{mock: &_m.Mock}
}

// ApprovePostFromModeration provides a mock function with given fields: ctx, postID
func (_m *MockPostStore) ApprovePostFromModeration(ctx context.Context, postID int) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for ApprovePostFromModeration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostStore_ApprovePostFromModeration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovePostFromModeration'
type MockPostStore_ApprovePostFromModeration_Call struct {
	*mock.Call
}

// ApprovePostFromModeration is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *MockPostStore_Expecter) ApprovePostFromModeration(ctx interface{}, postID interface{}) *MockPostStore_ApprovePostFromModeration_Call {
	return &MockPostStore_ApprovePostFromModeration_Call{Call: _e.mock.On("ApprovePostFromModeration", ctx, postID)}
}

func (_c *MockPostStore_ApprovePostFromModeration_Call) Run(run func(ctx context.Context, postID int)) *MockPostStore_ApprovePostFromModeration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostStore_ApprovePostFromModeration_Call) Return(err error) *MockPostStore_ApprovePostFromModeration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostStore_ApprovePostFromModeration_Call) RunAndReturn(run func(context.Context, int) error) *MockPostStore_ApprovePostFromModeration_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *MockPostStore) CreatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) (core.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostStore_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostStore_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.Post
func (_e *MockPostStore_Expecter) CreatePost(ctx interface{}, post interface{}) *MockPostStore_CreatePost_Call {
	return &MockPostStore_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *MockPostStore_CreatePost_Call) Run(run func(ctx context.Context, post core.Post)) *MockPostStore_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Post))
	})
	return _c
}

func (_c *MockPostStore_CreatePost_Call) Return(_a0 core.Post, _a1 error) *MockPostStore_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostStore_CreatePost_Call) RunAndReturn(run func(context.Context, core.Post) (core.Post, error)) *MockPostStore_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *MockPostStore) DeletePost(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostStore_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPostStore_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPostStore_Expecter) DeletePost(ctx interface{}, id interface{}) *MockPostStore_DeletePost_Call {
	return &MockPostStore_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *MockPostStore_DeletePost_Call) Run(run func(ctx context.Context, id int)) *MockPostStore_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostStore_DeletePost_Call) Return(_a0 error) *MockPostStore_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostStore_DeletePost_Call) RunAndReturn(run func(context.Context, int) error) *MockPostStore_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPosts provides a mock function with given fields: ctx, params
func (_m *MockPostStore) GetAllPosts(ctx context.Context, params core.GetAllPostsParams) ([]core.Post, int, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []core.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) ([]core.Post, int, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) []core.Post); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostStore_GetAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPosts'
type MockPostStore_GetAllPosts_Call struct {
	*mock.Call
}

// GetAllPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllPostsParams
func (_e *MockPostStore_Expecter) GetAllPosts(ctx interface{}, params interface{}) *MockPostStore_GetAllPosts_Call {
	return &MockPostStore_GetAllPosts_Call{Call: _e.mock.On("GetAllPosts", ctx, params)}
}

func (_c *MockPostStore_GetAllPosts_Call) Run(run func(ctx context.Context, params core.GetAllPostsParams)) *MockPostStore_GetAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *MockPostStore_GetAllPosts_Call) Return(_a0 []core.Post, _a1 int, _a2 error) *MockPostStore_GetAllPosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPostStore_GetAllPosts_Call) RunAndReturn(run func(context.Context, core.GetAllPostsParams) ([]core.Post, int, error)) *MockPostStore_GetAllPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *MockPostStore) GetPostByID(ctx context.Context, id int) (core.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostStore_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type MockPostStore_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPostStore_Expecter) GetPostByID(ctx interface{}, id interface{}) *MockPostStore_GetPostByID_Call {
	return &MockPostStore_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, id)}
}

func (_c *MockPostStore_GetPostByID_Call) Run(run func(ctx context.Context, id int)) *MockPostStore_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostStore_GetPostByID_Call) Return(_a0 core.Post, _a1 error) *MockPostStore_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostStore_GetPostByID_Call) RunAndReturn(run func(context.Context, int) (core.Post, error)) *MockPostStore_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsForModeration provides a mock function with given fields: ctx, filter
func (_m *MockPostStore) GetPostsForModeration(ctx context.Context, filter core.Filter) ([]core.Post, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsForModeration")
	}

	var r0 []core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Filter) ([]core.Post, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Filter) []core.Post); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostStore_GetPostsForModeration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsForModeration'
type MockPostStore_GetPostsForModeration_Call struct {
	*mock.Call
}

// GetPostsForModeration is a helper method to define mock.On call
//   - ctx context.Context
//   - filter core.Filter
func (_e *MockPostStore_Expecter) GetPostsForModeration(ctx interface{}, filter interface{}) *MockPostStore_GetPostsForModeration_Call {
	return &MockPostStore_GetPostsForModeration_Call{Call: _e.mock.On("GetPostsForModeration", ctx, filter)}
}

func (_c *MockPostStore_GetPostsForModeration_Call) Run(run func(ctx context.Context, filter core.Filter)) *MockPostStore_GetPostsForModeration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Filter))
	})
	return _c
}

func (_c *MockPostStore_GetPostsForModeration_Call) Return(posts []core.Post, err error) *MockPostStore_GetPostsForModeration_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostStore_GetPostsForModeration_Call) RunAndReturn(run func(context.Context, core.Filter) ([]core.Post, error)) *MockPostStore_GetPostsForModeration_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPosts provides a mock function with given fields: ctx, id
func (_m *MockPostStore) GetUserPosts(ctx context.Context, id int) ([]core.Post, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPosts")
	}

	var r0 []core.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.Post, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostStore_GetUserPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPosts'
type MockPostStore_GetUserPosts_Call struct {
	*mock.Call
}

// GetUserPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPostStore_Expecter) GetUserPosts(ctx interface{}, id interface{}) *MockPostStore_GetUserPosts_Call {
	return &MockPostStore_GetUserPosts_Call{Call: _e.mock.On("GetUserPosts", ctx, id)}
}

func (_c *MockPostStore_GetUserPosts_Call) Run(run func(ctx context.Context, id int)) *MockPostStore_GetUserPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostStore_GetUserPosts_Call) Return(posts []core.Post, count int, err error) *MockPostStore_GetUserPosts_Call {
	_c.Call.Return(posts, count, err)
	return _c
}

func (_c *MockPostStore_GetUserPosts_Call) RunAndReturn(run func(context.Context, int) ([]core.Post, int, error)) *MockPostStore_GetUserPosts_Call {
	_c.Call.Return(run)
	return _c
}

// SendToModeration provides a mock function with given fields: ctx, postID
func (_m *MockPostStore) SendToModeration(ctx context.Context, postID int) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for SendToModeration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostStore_SendToModeration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToModeration'
type MockPostStore_SendToModeration_Call struct {
	*mock.Call
}

// SendToModeration is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *MockPostStore_Expecter) SendToModeration(ctx interface{}, postID interface{}) *MockPostStore_SendToModeration_Call {
	return &MockPostStore_SendToModeration_Call{Call: _e.mock.On("SendToModeration", ctx, postID)}
}

func (_c *MockPostStore_SendToModeration_Call) Run(run func(ctx context.Context, postID int)) *MockPostStore_SendToModeration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostStore_SendToModeration_Call) Return(err error) *MockPostStore_SendToModeration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostStore_SendToModeration_Call) RunAndReturn(run func(context.Context, int) error) *MockPostStore_SendToModeration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, post
func (_m *MockPostStore) UpdatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) (core.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostStore_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockPostStore_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.Post
func (_e *MockPostStore_Expecter) UpdatePost(ctx interface{}, post interface{}) *MockPostStore_UpdatePost_Call {
	return &MockPostStore_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, post)}
}

func (_c *MockPostStore_UpdatePost_Call) Run(run func(ctx context.Context, post core.Post)) *MockPostStore_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Post))
	})
	return _c
}

func (_c *MockPostStore_UpdatePost_Call) Return(_a0 core.Post, _a1 error) *MockPostStore_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostStore_UpdatePost_Call) RunAndReturn(run func(context.Context, core.Post) (core.Post, error)) *MockPostStore_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostStore creates a new instance of MockPostStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostStore {
	mock := &MockPostStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
