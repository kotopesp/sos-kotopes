// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// BanUserWithRecord provides a mock function with given fields: ctx, banRecord
func (_m *MockUserStore) BanUserWithRecord(ctx context.Context, banRecord core.BannedUserRecord) error {
	ret := _m.Called(ctx, banRecord)

	if len(ret) == 0 {
		panic("no return value specified for BanUserWithRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.BannedUserRecord) error); ok {
		r0 = rf(ctx, banRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_BanUserWithRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUserWithRecord'
type MockUserStore_BanUserWithRecord_Call struct {
	*mock.Call
}

// BanUserWithRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - banRecord core.BannedUserRecord
func (_e *MockUserStore_Expecter) BanUserWithRecord(ctx interface{}, banRecord interface{}) *MockUserStore_BanUserWithRecord_Call {
	return &MockUserStore_BanUserWithRecord_Call{Call: _e.mock.On("BanUserWithRecord", ctx, banRecord)}
}

func (_c *MockUserStore_BanUserWithRecord_Call) Run(run func(ctx context.Context, banRecord core.BannedUserRecord)) *MockUserStore_BanUserWithRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.BannedUserRecord))
	})
	return _c
}

func (_c *MockUserStore_BanUserWithRecord_Call) Return(_a0 error) *MockUserStore_BanUserWithRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_BanUserWithRecord_Call) RunAndReturn(run func(context.Context, core.BannedUserRecord) error) *MockUserStore_BanUserWithRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExternalUser provides a mock function with given fields: ctx, user, externalUserID, authProvider
func (_m *MockUserStore) CreateExternalUser(ctx context.Context, user core.User, externalUserID int, authProvider string) (int, error) {
	ret := _m.Called(ctx, user, externalUserID, authProvider)

	if len(ret) == 0 {
		panic("no return value specified for CreateExternalUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User, int, string) (int, error)); ok {
		return rf(ctx, user, externalUserID, authProvider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User, int, string) int); ok {
		r0 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User, int, string) error); ok {
		r1 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_CreateExternalUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExternalUser'
type MockUserStore_CreateExternalUser_Call struct {
	*mock.Call
}

// CreateExternalUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
//   - externalUserID int
//   - authProvider string
func (_e *MockUserStore_Expecter) CreateExternalUser(ctx interface{}, user interface{}, externalUserID interface{}, authProvider interface{}) *MockUserStore_CreateExternalUser_Call {
	return &MockUserStore_CreateExternalUser_Call{Call: _e.mock.On("CreateExternalUser", ctx, user, externalUserID, authProvider)}
}

func (_c *MockUserStore_CreateExternalUser_Call) Run(run func(ctx context.Context, user core.User, externalUserID int, authProvider string)) *MockUserStore_CreateExternalUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockUserStore_CreateExternalUser_Call) Return(userID int, err error) *MockUserStore_CreateExternalUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockUserStore_CreateExternalUser_Call) RunAndReturn(run func(context.Context, core.User, int, string) (int, error)) *MockUserStore_CreateExternalUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserStore) CreateUser(ctx context.Context, user core.User) (int, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *MockUserStore_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserStore_CreateUser_Call {
	return &MockUserStore_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserStore_CreateUser_Call) Run(run func(ctx context.Context, user core.User)) *MockUserStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *MockUserStore_CreateUser_Call) Return(userID int, err error) *MockUserStore_CreateUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockUserStore_CreateUser_Call) RunAndReturn(run func(context.Context, core.User) (int, error)) *MockUserStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockUserStore) GetUser(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockUserStore_Expecter) GetUser(ctx interface{}, id interface{}) *MockUserStore_GetUser_Call {
	return &MockUserStore_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUserStore_GetUser_Call) Run(run func(ctx context.Context, id int)) *MockUserStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserStore_GetUser_Call) Return(user core.User, err error) *MockUserStore_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUser_Call) RunAndReturn(run func(context.Context, int) (core.User, error)) *MockUserStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *MockUserStore) GetUserByExternalID(ctx context.Context, externalID int) (core.ExternalUser, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByExternalID")
	}

	var r0 core.ExternalUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.ExternalUser, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.ExternalUser); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Get(0).(core.ExternalUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByExternalID'
type MockUserStore_GetUserByExternalID_Call struct {
	*mock.Call
}

// GetUserByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID int
func (_e *MockUserStore_Expecter) GetUserByExternalID(ctx interface{}, externalID interface{}) *MockUserStore_GetUserByExternalID_Call {
	return &MockUserStore_GetUserByExternalID_Call{Call: _e.mock.On("GetUserByExternalID", ctx, externalID)}
}

func (_c *MockUserStore_GetUserByExternalID_Call) Run(run func(ctx context.Context, externalID int)) *MockUserStore_GetUserByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserStore_GetUserByExternalID_Call) Return(data core.ExternalUser, err error) *MockUserStore_GetUserByExternalID_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockUserStore_GetUserByExternalID_Call) RunAndReturn(run func(context.Context, int) (core.ExternalUser, error)) *MockUserStore_GetUserByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockUserStore) GetUserByID(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserStore_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockUserStore_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockUserStore_GetUserByID_Call {
	return &MockUserStore_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockUserStore_GetUserByID_Call) Run(run func(ctx context.Context, id int)) *MockUserStore_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) Return(data core.User, err error) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) RunAndReturn(run func(context.Context, int) (core.User, error)) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserStore) GetUserByUsername(ctx context.Context, username string) (core.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (core.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) core.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockUserStore_GetUserByUsername_Call {
	return &MockUserStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockUserStore_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_GetUserByUsername_Call) Return(data core.User, err error) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockUserStore_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (core.User, error)) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, update
func (_m *MockUserStore) UpdateUser(ctx context.Context, id int, update core.UpdateUser) (core.User, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateUser) (core.User, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateUser) core.User); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateUser) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserStore_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - update core.UpdateUser
func (_e *MockUserStore_Expecter) UpdateUser(ctx interface{}, id interface{}, update interface{}) *MockUserStore_UpdateUser_Call {
	return &MockUserStore_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, update)}
}

func (_c *MockUserStore_UpdateUser_Call) Run(run func(ctx context.Context, id int, update core.UpdateUser)) *MockUserStore_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateUser))
	})
	return _c
}

func (_c *MockUserStore_UpdateUser_Call) Return(updatedUser core.User, err error) *MockUserStore_UpdateUser_Call {
	_c.Call.Return(updatedUser, err)
	return _c
}

func (_c *MockUserStore_UpdateUser_Call) RunAndReturn(run func(context.Context, int, core.UpdateUser) (core.User, error)) *MockUserStore_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
