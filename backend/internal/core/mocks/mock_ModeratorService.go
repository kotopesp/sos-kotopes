// Code generated by mockery v2.53.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockModeratorService is an autogenerated mock type for the ModeratorService type
type MockModeratorService struct {
	mock.Mock
}

type MockModeratorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModeratorService) EXPECT() *MockModeratorService_Expecter {
	return &MockModeratorService_Expecter{mock: &_m.Mock}
}

// ApprovePost provides a mock function with given fields: ctx, postID
func (_m *MockModeratorService) ApprovePost(ctx context.Context, postID int) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for ApprovePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModeratorService_ApprovePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovePost'
type MockModeratorService_ApprovePost_Call struct {
	*mock.Call
}

// ApprovePost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *MockModeratorService_Expecter) ApprovePost(ctx interface{}, postID interface{}) *MockModeratorService_ApprovePost_Call {
	return &MockModeratorService_ApprovePost_Call{Call: _e.mock.On("ApprovePost", ctx, postID)}
}

func (_c *MockModeratorService_ApprovePost_Call) Run(run func(ctx context.Context, postID int)) *MockModeratorService_ApprovePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockModeratorService_ApprovePost_Call) Return(err error) *MockModeratorService_ApprovePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModeratorService_ApprovePost_Call) RunAndReturn(run func(context.Context, int) error) *MockModeratorService_ApprovePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *MockModeratorService) DeletePost(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModeratorService_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockModeratorService_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockModeratorService_Expecter) DeletePost(ctx interface{}, id interface{}) *MockModeratorService_DeletePost_Call {
	return &MockModeratorService_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *MockModeratorService_DeletePost_Call) Run(run func(ctx context.Context, id int)) *MockModeratorService_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockModeratorService_DeletePost_Call) Return(err error) *MockModeratorService_DeletePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModeratorService_DeletePost_Call) RunAndReturn(run func(context.Context, int) error) *MockModeratorService_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetModerator provides a mock function with given fields: ctx, id
func (_m *MockModeratorService) GetModerator(ctx context.Context, id int) (core.Moderator, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetModerator")
	}

	var r0 core.Moderator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Moderator, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Moderator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModeratorService_GetModerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModerator'
type MockModeratorService_GetModerator_Call struct {
	*mock.Call
}

// GetModerator is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockModeratorService_Expecter) GetModerator(ctx interface{}, id interface{}) *MockModeratorService_GetModerator_Call {
	return &MockModeratorService_GetModerator_Call{Call: _e.mock.On("GetModerator", ctx, id)}
}

func (_c *MockModeratorService_GetModerator_Call) Run(run func(ctx context.Context, id int)) *MockModeratorService_GetModerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockModeratorService_GetModerator_Call) Return(moderator core.Moderator, err error) *MockModeratorService_GetModerator_Call {
	_c.Call.Return(moderator, err)
	return _c
}

func (_c *MockModeratorService_GetModerator_Call) RunAndReturn(run func(context.Context, int) (core.Moderator, error)) *MockModeratorService_GetModerator_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsForModeration provides a mock function with given fields: ctx, filter
func (_m *MockModeratorService) GetPostsForModeration(ctx context.Context, filter core.Filter) ([]core.PostForModeration, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsForModeration")
	}

	var r0 []core.PostForModeration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Filter) ([]core.PostForModeration, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Filter) []core.PostForModeration); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostForModeration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModeratorService_GetPostsForModeration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsForModeration'
type MockModeratorService_GetPostsForModeration_Call struct {
	*mock.Call
}

// GetPostsForModeration is a helper method to define mock.On call
//   - ctx context.Context
//   - filter core.Filter
func (_e *MockModeratorService_Expecter) GetPostsForModeration(ctx interface{}, filter interface{}) *MockModeratorService_GetPostsForModeration_Call {
	return &MockModeratorService_GetPostsForModeration_Call{Call: _e.mock.On("GetPostsForModeration", ctx, filter)}
}

func (_c *MockModeratorService_GetPostsForModeration_Call) Run(run func(ctx context.Context, filter core.Filter)) *MockModeratorService_GetPostsForModeration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Filter))
	})
	return _c
}

func (_c *MockModeratorService_GetPostsForModeration_Call) Return(posts []core.PostForModeration, err error) *MockModeratorService_GetPostsForModeration_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockModeratorService_GetPostsForModeration_Call) RunAndReturn(run func(context.Context, core.Filter) ([]core.PostForModeration, error)) *MockModeratorService_GetPostsForModeration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModeratorService creates a new instance of MockModeratorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModeratorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModeratorService {
	mock := &MockModeratorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
